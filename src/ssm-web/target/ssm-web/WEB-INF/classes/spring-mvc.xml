<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
                            http://www.springframework.org/schema/context  
                            http://www.springframework.org/schema/context/spring-context-4.0.xsd 
           					http://www.springframework.org/schema/aop
		   					http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
                            http://www.springframework.org/schema/mvc  
                            http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	<context:property-placeholder ignore-unresolvable="true" location="classpath:application.properties"/>

	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />    <!-- JSON转换器 -->
			</list>
		</property>
	</bean>
	<!-- 全局异常处理 -->
	<bean id="exceptionHandler" class="com.sky.ssm.exception.DefaultExceptionHandler" />
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!--将日志类注入到bean中。 -->
	<bean id="logAspect" class="com.sky.ssm.aspect.LogAspect"></bean>

	<aop:config>
		<!--调用日志类 -->
		<aop:aspect id="LogAspect" ref="logAspect">
			<!--配置在controller包下所有的类在调用之前都会被拦截 -->
			<aop:pointcut id="log"
				expression="execution(* com.sky.ssm.controller.*.*(..))" />
			<!-- 方法前触发<aop:before pointcut-ref="log" method="before"/> -->
			<!-- 方法后触发 <aop:after pointcut-ref="log" method="after"/> -->
			<!-- 环绕触发 -->
			<aop:around pointcut-ref="log" method="around" />
		</aop:aspect>
	</aop:config>
	<mvc:interceptors>
		<!-- 日志 拦截器 -->
		<!-- <mvc:interceptor> <mvc:mapping path="/**" /> <bean class="com.sky.ssm.interceptor.LogInterceptor" 
			/> </mvc:interceptor> -->
		<!-- SSO 拦截器 -->
		<!-- path 对所有的请求拦截使用/**，对某个模块下的请求拦截使用：/myPath/* -->
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="com.sky.ssm.interceptor.LoginInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	<!-- 对静态资源的访问 -->
	<!-- <mvc:resources mapping="/js/**" location="/js/" /> <mvc:resources mapping="/css/**" 
		location="/css/" /> -->

	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.sky.ssm.controller" />

	<!-- 添加注解驱动 -->
	<mvc:annotation-driven enable-matrix-variables="true" />
	<!-- 允许对静态资源文件的访问 -->

	<mvc:default-servlet-handler />

	<!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="UTF-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>
</beans>